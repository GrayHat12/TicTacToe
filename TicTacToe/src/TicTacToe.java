
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author root
 */
public class TicTacToe extends javax.swing.JFrame {

    private static char boardd[][] = new char[3][3];

    /**
     * Creates new form TicTacToe
     */
    public TicTacToe() {
        initComponents();
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                boardd[i][j] = 'n';
            }
        }
        update();
    }

    NextMove move;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bload = new javax.swing.JButton();
        bsave = new javax.swing.JButton();
        msg = new javax.swing.JLabel();
        board = new javax.swing.JPanel();
        block00 = new javax.swing.JLabel();
        block01 = new javax.swing.JLabel();
        block02 = new javax.swing.JLabel();
        block10 = new javax.swing.JLabel();
        block11 = new javax.swing.JLabel();
        block12 = new javax.swing.JLabel();
        block22 = new javax.swing.JLabel();
        block20 = new javax.swing.JLabel();
        block21 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GicGacGoe");
        setPreferredSize(new java.awt.Dimension(600, 400));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bload.setText("LOAD");
        bload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bloadMouseClicked(evt);
            }
        });
        getContentPane().add(bload, new org.netbeans.lib.awtextra.AbsoluteConstraints(438, 73, 75, -1));

        bsave.setText("SAVE");
        bsave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bsaveMouseClicked(evt);
            }
        });
        getContentPane().add(bsave, new org.netbeans.lib.awtextra.AbsoluteConstraints(438, 115, 75, -1));

        msg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        msg.setText("--START--");
        getContentPane().add(msg, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 210, 210, 39));

        board.setBackground(new java.awt.Color(153, 138, 78));
        board.setForeground(new java.awt.Color(102, 255, 204));
        board.setPreferredSize(new java.awt.Dimension(300, 300));
        board.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        block00.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        block00.setForeground(new java.awt.Color(255, 0, 0));
        block00.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        block00.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 51, 51), null, null));
        block00.setPreferredSize(new java.awt.Dimension(100, 100));
        block00.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                block00MouseClicked(evt);
            }
        });
        board.add(block00, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 100));

        block01.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        block01.setForeground(new java.awt.Color(255, 0, 0));
        block01.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        block01.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 51, 51), null, null));
        block01.setPreferredSize(new java.awt.Dimension(100, 100));
        block01.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                block01MouseClicked(evt);
            }
        });
        board.add(block01, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 0, -1, -1));

        block02.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        block02.setForeground(new java.awt.Color(255, 0, 0));
        block02.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        block02.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 51, 51), null, null));
        block02.setPreferredSize(new java.awt.Dimension(100, 100));
        block02.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                block02MouseClicked(evt);
            }
        });
        board.add(block02, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 0, -1, -1));

        block10.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        block10.setForeground(new java.awt.Color(255, 0, 0));
        block10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        block10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 51, 51), null, null));
        block10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        block10.setPreferredSize(new java.awt.Dimension(100, 100));
        block10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                block10MouseClicked(evt);
            }
        });
        board.add(block10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 106, -1, -1));

        block11.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        block11.setForeground(new java.awt.Color(255, 0, 0));
        block11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        block11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 51, 51), null, null));
        block11.setPreferredSize(new java.awt.Dimension(100, 100));
        block11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                block11MouseClicked(evt);
            }
        });
        board.add(block11, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 106, -1, -1));

        block12.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        block12.setForeground(new java.awt.Color(255, 0, 0));
        block12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        block12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 51, 51), null, null));
        block12.setPreferredSize(new java.awt.Dimension(100, 100));
        block12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                block12MouseClicked(evt);
            }
        });
        board.add(block12, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 106, -1, -1));

        block22.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        block22.setForeground(new java.awt.Color(255, 0, 0));
        block22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        block22.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 51, 51), null, null));
        block22.setPreferredSize(new java.awt.Dimension(100, 100));
        block22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                block22MouseClicked(evt);
            }
        });
        board.add(block22, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 212, -1, -1));

        block20.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        block20.setForeground(new java.awt.Color(255, 0, 0));
        block20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        block20.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 51, 51), null, null));
        block20.setPreferredSize(new java.awt.Dimension(100, 100));
        block20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                block20MouseClicked(evt);
            }
        });
        board.add(block20, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 212, -1, -1));

        block21.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        block21.setForeground(new java.awt.Color(255, 0, 0));
        block21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        block21.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 51, 51), null, null));
        block21.setPreferredSize(new java.awt.Dimension(100, 100));
        block21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                block21MouseClicked(evt);
            }
        });
        board.add(block21, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 212, -1, -1));

        getContentPane().add(board, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 310, 310));

        jButton1.setText("REPLAY");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 160, 80, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void block00MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_block00MouseClicked
        System.out.println(allComplete() + "\t" + noMovesLeft());
        if (allComplete() || noMovesLeft()) {
            printWinner();
        } else {
            if (block00.getText().equals("n") || block00.getText().equals("")) {
                block00.setText("X");
                boardd[0][0] = 'x';
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                boardd = move.main(boardd, false);
                //print(boardd);
                msg.setText("AI's Turn");
                //delay(2000l);
                update();
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
            } else {
                msg.setText("Block already filled");
            }
        }
    }//GEN-LAST:event_block00MouseClicked

    private void block01MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_block01MouseClicked
        if (allComplete() || noMovesLeft()) {
            printWinner();
        } else {
            if (block01.getText().equals("n") || block01.getText().equals("")) {
                block01.setText("X");
                boardd[0][1] = 'x';
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
                boardd = move.main(boardd, false);
                //print(boardd);
                msg.setText("AI's Turn");
                //delay(2000l);
                update();
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
            } else {
                msg.setText("Block already filled");
            }
        }
    }//GEN-LAST:event_block01MouseClicked

    private void block02MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_block02MouseClicked
        if (allComplete() || noMovesLeft()) {
            printWinner();
        } else {
            if (block02.getText().equals("n") || block02.getText().equals("")) {
                block02.setText("X");
                boardd[0][2] = 'x';
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
                boardd = move.main(boardd, false);
                //print(boardd);
                msg.setText("AI's Turn");
                //delay(2000l);
                update();
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
            } else {
                msg.setText("Block already filled");
            }
        }
    }//GEN-LAST:event_block02MouseClicked

    private void block10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_block10MouseClicked
        if (allComplete() || noMovesLeft()) {
            printWinner();
        } else {
            if (block10.getText().equals("n") || block10.getText().equals("")) {
                block10.setText("X");
                boardd[1][0] = 'x';
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
                boardd = move.main(boardd, false);
                //print(boardd);
                msg.setText("AI's Turn");
                //delay(2000l);
                update();
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
            } else {
                msg.setText("Block already filled");
            }
        }
    }//GEN-LAST:event_block10MouseClicked

    private void block11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_block11MouseClicked
        if (allComplete() || noMovesLeft()) {
            printWinner();
        } else {
            if (block11.getText().equals("n") || block11.getText().equals("")) {
                block11.setText("X");
                boardd[1][1] = 'x';
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
                boardd = move.main(boardd, false);
                //print(boardd);
                msg.setText("AI's Turn");
                //delay(2000l);
                update();
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
            } else {
                msg.setText("Block already filled");
            }
        }
    }//GEN-LAST:event_block11MouseClicked

    private void block12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_block12MouseClicked
        if (allComplete() || noMovesLeft()) {
            printWinner();
        } else {
            if (block12.getText().equals("n") || block12.getText().equals("")) {
                block12.setText("X");
                boardd[1][2] = 'x';
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
                boardd = move.main(boardd, false);
                //print(boardd);
                msg.setText("AI's Turn");
                //delay(2000l);
                update();
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
            } else {
                msg.setText("Block already filled");
            }
        }
    }//GEN-LAST:event_block12MouseClicked

    private void block20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_block20MouseClicked
        if (allComplete() || noMovesLeft()) {
            printWinner();
        } else {
            if (block20.getText().equals("n") || block20.getText().equals("")) {
                block20.setText("X");
                boardd[2][0] = 'x';
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
                boardd = move.main(boardd, false);
                //print(boardd);
                msg.setText("AI's Turn");
                //delay(2000l);
                update();
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
            } else {
                msg.setText("Block already filled");
            }
        }
    }//GEN-LAST:event_block20MouseClicked

    private void block21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_block21MouseClicked
        if (allComplete() || noMovesLeft()) {
            printWinner();
        } else {
            if (block21.getText().equals("n") || block21.getText().equals("")) {
                block21.setText("X");
                boardd[2][1] = 'x';
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
                boardd = move.main(boardd, false);
                //print(boardd);
                msg.setText("AI's Turn");
                //delay(2000l);
                update();
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
            } else {
                msg.setText("Block already filled");
            }
        }
    }//GEN-LAST:event_block21MouseClicked

    private void block22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_block22MouseClicked
        if (allComplete() || noMovesLeft()) {
            printWinner();
        } else {
            if (block22.getText().equals("n") || block22.getText().equals("")) {
                block22.setText("X");
                boardd[2][2] = 'x';
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
                boardd = move.main(boardd, false);
                //print(boardd);
                msg.setText("AI's Turn");
                //delay(2000l);
                update();
                if (allComplete() || noMovesLeft()) {
                    printWinner();
                } else {
                    msg.setText("Your Turn");
                }
                //repaint();
            } else {
                msg.setText("Block already filled");
            }
        }
    }//GEN-LAST:event_block22MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        this.dispose();
        main(new String[5]);
    }//GEN-LAST:event_jButton1MouseClicked

    private void bsaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bsaveMouseClicked
        if (fileDialog == null) {
            fileDialog = new JFileChooser();
        }
        File selectedFile;  // Initially selected file name in the dialog.
        selectedFile = new File("save00ttt.ghh");
        fileDialog.setSelectedFile(selectedFile);
        fileDialog.setDialogTitle("Select File for Saving the Game");
        int option = fileDialog.showSaveDialog(this);
        if (option != JFileChooser.APPROVE_OPTION) {
            return;  // User canceled or clicked the dialog's close box.
        }
        selectedFile = fileDialog.getSelectedFile();
        if (selectedFile.exists()) {  // Ask the user whether to replace the file.
            int response = JOptionPane.showConfirmDialog(this,
                    "The file \"" + selectedFile.getName()
                    + "\" already exists.\nDo you want to replace it?",
                    "Confirm Save",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            if (response != JOptionPane.YES_OPTION) {
                return;  // User does not want to replace the file.
            }
        }
        PrintWriter out;
        try {
            FileWriter stream = new FileWriter(selectedFile);
            out = new PrintWriter(stream);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Sorry, but an error occurred while trying to open the file:\n" + e);
            return;
        }
        try {
            //out.println(""); // Identifies file as a Checkers game.
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    out.print(boardd[row][col]);
                }
                out.println();
            }
            //out.println(currentPlayer == CheckersData.RED ? "Red" : "Black");
            out.close();
            if (out.checkError()) {
                throw new IOException("Some error occurred while saving the file.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Sorry, but an error occurred while trying to write the text:\n" + e);
        }
    }//GEN-LAST:event_bsaveMouseClicked

    private void bloadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bloadMouseClicked
        Scanner inp = new Scanner(System.in);
        if (fileDialog == null) {
            fileDialog = new JFileChooser();
        }
        fileDialog.setDialogTitle("Select TicTacToe Game File");
        fileDialog.setSelectedFile(null);  // No file is initially selected.
        int option = fileDialog.showOpenDialog(this);
        if (option != JFileChooser.APPROVE_OPTION) {
            return;  // User canceled or clicked the dialog's close box.
        }
        File selectedFile = fileDialog.getSelectedFile();
        try {
            String data = "";
            data = new String(Files.readAllBytes(Paths.get(selectedFile.getPath())));
            //this.dispose();
            int index = 0;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (data.charAt(index) == 'n') {
                        boardd[i][j] = 'n';
                    } else if (data.charAt(index) == 'x') {
                        boardd[i][j] = 'x';
                    } else if (data.charAt(index) == '0') {
                        boardd[i][j] = '0';
                    }else if(data.charAt(index)=='\n')
                    {
                        j-=1;
                    }else {
                        msg.setText("INVALID SAVEGAME FILE");
                        block00.setEnabled(false);
                        block01.setEnabled(false);
                        block02.setEnabled(false);
                        block10.setEnabled(false);
                        block11.setEnabled(false);
                        block12.setEnabled(false);
                        block20.setEnabled(false);
                        block21.setEnabled(false);
                        block22.setEnabled(false);
                        break;
                    }
                    index+=1;
                }
            }
            update();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Sorry, but an error occurred while trying to read the data:\n" + e);
        }
    }//GEN-LAST:event_bloadMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicTacToe().setVisible(true);
            }
        });
    }

    private void delay(long PERIOD) {
        long lastTime = System.currentTimeMillis();
        boolean sleep = true;
        while (sleep) {
            long thisTime = System.currentTimeMillis();
            if (thisTime >= lastTime + PERIOD) {
                sleep = false;
            }
        }
    }

    void update() {
        block00.setText("" + boardd[0][0]);
        block01.setText("" + boardd[0][1]);
        block02.setText("" + boardd[0][2]);
        block10.setText("" + boardd[1][0]);
        block11.setText("" + boardd[1][1]);
        block12.setText("" + boardd[1][2]);
        block20.setText("" + boardd[2][0]);
        block21.setText("" + boardd[2][1]);
        block22.setText("" + boardd[2][2]);
        //this.repaint();
    }

    private boolean aiw = false;
    private boolean usw = false;

    boolean allComplete() {
        boolean flag = false;
        for (int i = 0; i < 3 && !flag; i++) {
            int cocc = 0;
            for (int j = 0; j < 3 && !flag; j++) {
                if (boardd[i][j] == '0') {
                    cocc += 1;
                }
            }
            if (cocc == 3) {
                flag = true;
                aiw = true;
                usw = false;
                break;
            }
        }
        for (int i = 0; i < 3 && !flag; i++) {
            int cocc = 0;
            for (int j = 0; j < 3 && !flag; j++) {
                if (boardd[j][i] == '0') {
                    cocc += 1;
                }
            }
            if (cocc == 3) {
                flag = true;
                aiw = true;
                usw = false;
                break;
            }
        }
        if (!flag) {
            int cocc = 0;
            for (int i = 0; i < 3; i++) {
                if (boardd[i][i] == '0') {
                    cocc += 1;
                }
            }
            if (cocc == 3) {
                flag = true;
                aiw = true;
                usw = false;
            }
        }
        if (!flag) {
            int cocc = 0;
            if (boardd[0][2] == '0') {
                cocc += 1;
            }
            if (boardd[1][1] == '0') {
                cocc += 1;
            }
            if (boardd[2][0] == '0') {
                cocc += 1;
            }
            if (cocc == 3) {
                flag = true;
                aiw = true;
                usw = false;
            }
        }

        for (int i = 0; i < 3 && !flag; i++) {
            int cocc = 0;
            for (int j = 0; j < 3 && !flag; j++) {
                if (boardd[i][j] == 'x') {
                    cocc += 1;
                }
            }
            if (cocc == 3) {
                flag = true;
                aiw = false;
                usw = true;
                break;
            }
        }
        for (int i = 0; i < 3 && !flag; i++) {
            int cocc = 0;
            for (int j = 0; j < 3 && !flag; j++) {
                if (boardd[j][i] == 'x') {
                    cocc += 1;
                }
            }
            if (cocc == 3) {
                flag = true;
                aiw = false;
                usw = true;
                break;
            }
        }
        if (!flag) {
            int cocc = 0;
            for (int i = 0; i < 3; i++) {
                if (boardd[i][i] == 'x') {
                    cocc += 1;
                }
            }
            if (cocc == 3) {
                flag = true;
                aiw = false;
                usw = true;
            }
        }
        if (!flag) {
            int cocc = 0;
            if (boardd[0][2] == '0') {
                cocc += 1;
            }
            if (boardd[1][1] == '0') {
                cocc += 1;
            }
            if (boardd[2][0] == '0') {
                cocc += 1;
            }
            if (cocc == 3) {
                flag = true;
                aiw = false;
                usw = true;
            }
        }

        return flag;
    }

    void printWinner() {
        if (aiw) {
            msg.setText("YOU LOSE");
        } else if (usw) {
            msg.setText("YOU WIN");
        } else {
            msg.setText("MATCH DRAW");
        }
        block00.setEnabled(false);
        block01.setEnabled(false);
        block02.setEnabled(false);
        block10.setEnabled(false);
        block11.setEnabled(false);
        block12.setEnabled(false);
        block20.setEnabled(false);
        block21.setEnabled(false);
        block22.setEnabled(false);
    }
    JFileChooser fileDialog;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton bload;
    public javax.swing.JLabel block00;
    public javax.swing.JLabel block01;
    public javax.swing.JLabel block02;
    public javax.swing.JLabel block10;
    public javax.swing.JLabel block11;
    public javax.swing.JLabel block12;
    public javax.swing.JLabel block20;
    public javax.swing.JLabel block21;
    public javax.swing.JLabel block22;
    public javax.swing.JPanel board;
    public javax.swing.JButton bsave;
    public javax.swing.JButton jButton1;
    public javax.swing.JLabel msg;
    // End of variables declaration//GEN-END:variables

    private boolean noMovesLeft() {
        int blocks = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (boardd[i][j] == 'n') {
                    blocks += 1;
                }
            }
        }
        return (blocks == 0);
    }
}